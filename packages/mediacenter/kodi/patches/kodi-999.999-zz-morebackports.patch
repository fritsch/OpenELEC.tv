From 54d6c2b5fca21070af6c0d0f9761536558120ddd Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 1 Nov 2015 22:19:13 +0200
Subject: [PATCH 1/7] [udevprovider] fix segfaults. mountpoint can be null

---
 xbmc/storage/linux/UDevProvider.cpp | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/xbmc/storage/linux/UDevProvider.cpp b/xbmc/storage/linux/UDevProvider.cpp
index 0ca370b..4aa7c5c 100644
--- a/xbmc/storage/linux/UDevProvider.cpp
+++ b/xbmc/storage/linux/UDevProvider.cpp
@@ -254,7 +254,7 @@ bool CUDevProvider::PumpDriveChangeEvents(IStorageEventsCallback *callback)
       else if (mountpoint)
         label = URIUtils::GetFileName(mountpoint);
 
-      if (!strcmp(action, "add") && !strcmp(devtype, "partition"))
+      if (mountpoint && (!strcmp(action, "add") && !strcmp(devtype, "partition")))
       {
         CLog::Log(LOGNOTICE, "UDev: Added %s", mountpoint);
         if (callback)
@@ -263,7 +263,6 @@ bool CUDevProvider::PumpDriveChangeEvents(IStorageEventsCallback *callback)
       }
       if (!strcmp(action, "remove") && !strcmp(devtype, "partition"))
       {
-        CLog::Log(LOGNOTICE, "UDev: Removed %s", mountpoint);
         if (callback)
           callback->OnStorageSafelyRemoved(label);
         changed = true;
-- 
2.5.0


From e1f5aec79c6b38ea5a28d15e42dd1865429578b6 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 1 Nov 2015 22:27:44 +0200
Subject: [PATCH 2/7] [udevprovider] fix mounting raw filesystems on a non
 partitioned disks

---
 xbmc/storage/linux/UDevProvider.cpp | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/xbmc/storage/linux/UDevProvider.cpp b/xbmc/storage/linux/UDevProvider.cpp
index 4aa7c5c..ff1681c 100644
--- a/xbmc/storage/linux/UDevProvider.cpp
+++ b/xbmc/storage/linux/UDevProvider.cpp
@@ -254,14 +254,15 @@ bool CUDevProvider::PumpDriveChangeEvents(IStorageEventsCallback *callback)
       else if (mountpoint)
         label = URIUtils::GetFileName(mountpoint);
 
-      if (mountpoint && (!strcmp(action, "add") && !strcmp(devtype, "partition")))
+      const char *fs_usage = udev_device_get_property_value(dev, "ID_FS_USAGE");
+      if (mountpoint && strcmp(action, "add") == 0 && (fs_usage && strcmp(fs_usage, "filesystem") == 0))
       {
         CLog::Log(LOGNOTICE, "UDev: Added %s", mountpoint);
         if (callback)
           callback->OnStorageAdded(label, mountpoint);
         changed = true;
       }
-      if (!strcmp(action, "remove") && !strcmp(devtype, "partition"))
+      if (strcmp(action, "remove") == 0 && (fs_usage && strcmp(fs_usage, "filesystem") == 0))
       {
         if (callback)
           callback->OnStorageSafelyRemoved(label);
-- 
2.5.0


From f1f3ae27758be60b3b5562fccf663c80c00b4074 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Mon, 2 Nov 2015 13:13:02 +0200
Subject: [PATCH 3/7] [udevprovider] also handle 'change' events. fixes data
 cd/dvds

---
 xbmc/storage/linux/UDevProvider.cpp | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/xbmc/storage/linux/UDevProvider.cpp b/xbmc/storage/linux/UDevProvider.cpp
index ff1681c..63a154c 100644
--- a/xbmc/storage/linux/UDevProvider.cpp
+++ b/xbmc/storage/linux/UDevProvider.cpp
@@ -268,6 +268,23 @@ bool CUDevProvider::PumpDriveChangeEvents(IStorageEventsCallback *callback)
           callback->OnStorageSafelyRemoved(label);
         changed = true;
       }
+      if (strcmp(action, "change") == 0)
+      {
+        if (mountpoint)
+        {
+          CLog::Log(LOGNOTICE, "UDev: Changed / Added %s", mountpoint);
+          if (callback)
+            callback->OnStorageAdded(label, mountpoint);
+          changed = true;
+        }
+        const char *eject_request = udev_device_get_property_value(dev, "DISK_EJECT_REQUEST");
+        if (eject_request && strcmp(eject_request, "1") == 0)
+        {
+          if (callback)
+            callback->OnStorageSafelyRemoved(label);
+          changed = true;
+        }
+      }
     }
     udev_device_unref(dev);
   }
-- 
2.5.0


From d428f0daa24fb54b170b7fa2d6ddb765bb6b8893 Mon Sep 17 00:00:00 2001
From: Rainer Hochecker <fernetmenta@online.de>
Date: Sun, 1 Nov 2015 12:26:29 +0100
Subject: [PATCH 4/7] paplayer: wait for eof if no crossfading or cue sheet

---
 xbmc/cores/paplayer/PAPlayer.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/xbmc/cores/paplayer/PAPlayer.cpp b/xbmc/cores/paplayer/PAPlayer.cpp
index 8eecc95..cf89045 100644
--- a/xbmc/cores/paplayer/PAPlayer.cpp
+++ b/xbmc/cores/paplayer/PAPlayer.cpp
@@ -453,7 +453,8 @@ bool PAPlayer::QueueNextFileEx(const CFileItem &file, bool fadeIn/* = true */, b
 
 void PAPlayer::UpdateStreamInfoPlayNextAtFrame(StreamInfo *si, unsigned int crossFadingTime)
 {
-  if (si)
+  // if no crossfading or cue sheet, wait for eof
+  if (si && (crossFadingTime || si->m_endOffset))
   {
     int64_t streamTotalTime = si->m_decoder.TotalTime();
     if (si->m_endOffset)
-- 
2.5.0


From d7091684105cfc187bf4133246d38e6063168796 Mon Sep 17 00:00:00 2001
From: Lauri Myllari <lauri.myllari@gmail.com>
Date: Tue, 2 Jun 2015 14:31:27 -0700
Subject: [PATCH 5/7] x11: use the standard hint for disabling compositing

---
 xbmc/windowing/X11/WinSystemX11.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/xbmc/windowing/X11/WinSystemX11.cpp b/xbmc/windowing/X11/WinSystemX11.cpp
index e3e312c..2aab54f 100644
--- a/xbmc/windowing/X11/WinSystemX11.cpp
+++ b/xbmc/windowing/X11/WinSystemX11.cpp
@@ -763,6 +763,9 @@ bool CWinSystemX11::SetWindow(int width, int height, bool fullscreen, const std:
       int one = 1;
       XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_KDE_NET_WM_BLOCK_COMPOSITING", True), XA_CARDINAL, 32,
                       PropModeReplace, (unsigned char*) &one,  1);
+      // standard way for Gnome 3
+      XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_NET_WM_BYPASS_COMPOSITOR", True), XA_CARDINAL, 32,
+                      PropModeReplace, (unsigned char*) &one,  1);
     }
 
     // define invisible cursor
-- 
2.5.0


From 2b0282c0411f2a4783bd30eb676ff1d69b72b690 Mon Sep 17 00:00:00 2001
From: fritsch <Peter.Fruehberger@gmail.com>
Date: Wed, 9 Sep 2015 07:41:10 +0200
Subject: [PATCH 6/7] Compositors: Only disable them if actually in use

---
 xbmc/windowing/X11/WinSystemX11.cpp | 18 +++++++++++++-----
 1 file changed, 13 insertions(+), 5 deletions(-)

diff --git a/xbmc/windowing/X11/WinSystemX11.cpp b/xbmc/windowing/X11/WinSystemX11.cpp
index 2aab54f..00ef2da 100644
--- a/xbmc/windowing/X11/WinSystemX11.cpp
+++ b/xbmc/windowing/X11/WinSystemX11.cpp
@@ -761,11 +761,19 @@ bool CWinSystemX11::SetWindow(int width, int height, bool fullscreen, const std:
       XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_NET_WM_STATE", True), XA_ATOM, 32, PropModeReplace, (unsigned char *) &fs, 1);
       // disable desktop compositing for KDE, when Kodi is in full-screen mode
       int one = 1;
-      XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_KDE_NET_WM_BLOCK_COMPOSITING", True), XA_CARDINAL, 32,
-                      PropModeReplace, (unsigned char*) &one,  1);
-      // standard way for Gnome 3
-      XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_NET_WM_BYPASS_COMPOSITOR", True), XA_CARDINAL, 32,
-                      PropModeReplace, (unsigned char*) &one,  1);
+      Atom composite = XInternAtom(m_dpy, "_KDE_NET_WM_BLOCK_COMPOSITING", True);
+      if (composite != None)
+      {
+        XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_KDE_NET_WM_BLOCK_COMPOSITING", True), XA_CARDINAL, 32,
+                        PropModeReplace, (unsigned char*) &one,  1);
+      }
+      composite = XInternAtom(m_dpy, "_NET_WM_BYPASS_COMPOSITOR", True);
+      if (composite != None)
+      {
+        // standard way for Gnome 3
+        XChangeProperty(m_dpy, m_mainWindow, XInternAtom(m_dpy, "_NET_WM_BYPASS_COMPOSITOR", True), XA_CARDINAL, 32,
+                        PropModeReplace, (unsigned char*) &one,  1);
+      }
     }
 
     // define invisible cursor
-- 
2.5.0


From 7bdf63e21b31a45fee835dd1d6711af485d56a7c Mon Sep 17 00:00:00 2001
From: fritsch <Peter.Fruehberger@gmail.com>
Date: Mon, 9 Nov 2015 21:04:10 +0100
Subject: [PATCH 7/7] vaapi: cope with continuous get_buffer errors
 (fd0067805976f61260fb18d1171bd77195d63bd3) v1: Initial backport v2: Added:
 d54993ed44b90f23fffe7fb4ab85b435b23a21cd

---
 xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.cpp | 15 +++++++++------
 xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.h   |  2 +-
 2 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.cpp b/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.cpp
index 0b03e86..15fc75c 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.cpp
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.cpp
@@ -468,7 +468,7 @@ CDecoder::CDecoder() : m_vaapiOutput(&m_inMsgEvent)
   m_vaapiConfig.contextId = VA_INVALID_ID;
   m_vaapiConfig.configId = VA_INVALID_ID;
   m_avctx = NULL;
-  m_getBufferError = false;
+  m_getBufferError = 0;
 }
 
 CDecoder::~CDecoder()
@@ -524,6 +524,7 @@ bool CDecoder::Open(AVCodecContext* avctx, AVCodecContext* mainctx, const enum P
   m_DisplayState = VAAPI_OPEN;
   m_vaapiConfigured = false;
   m_presentPicture = 0;
+  m_getBufferError = 0;
 
   VAProfile profile;
   switch (avctx->codec_id)
@@ -712,10 +713,12 @@ int CDecoder::FFGetBuffer(AVCodecContext *avctx, AVFrame *pic, int flags)
     va->m_bufferStats.Get(decoded, processed, render, vpp);
     CLog::Log(LOGWARNING, "VAAPI::FFGetBuffer - no surface available - dec: %d, render: %d",
                          decoded, render);
-    va->m_getBufferError = true;
+    va->m_getBufferError++;
     return -1;
   }
 
+  va->m_getBufferError = 0;
+
   pic->data[1] = pic->data[2] = NULL;
   pic->data[0] = (uint8_t*)(uintptr_t)surf;
   pic->data[3] = (uint8_t*)(uintptr_t)surf;
@@ -747,8 +750,6 @@ void CDecoder::FFReleaseBuffer(uint8_t *data)
 
 int CDecoder::Decode(AVCodecContext* avctx, AVFrame* pFrame)
 {
-  m_getBufferError = false;
-
   int result = Check(avctx);
   if (result)
     return result;
@@ -908,7 +909,7 @@ int CDecoder::Check(AVCodecContext* avctx)
       return VC_ERROR;
   }
 
-  if (m_getBufferError)
+  if (m_getBufferError > 0 && m_getBufferError < 5)
   {
     // if there is no other error, sleep for a short while
     // in order not to drain player's message queue
@@ -918,7 +919,6 @@ int CDecoder::Check(AVCodecContext* avctx)
     ret |= VC_NOBUFFER;
   }
 
-  m_getBufferError = false;
   return ret;
 }
 
@@ -955,7 +955,10 @@ void CDecoder::Reset()
       m_DisplayState = VAAPI_ERROR;
     }
     else
+    {
       m_bufferStats.Reset();
+      m_getBufferError = 0;
+    }
   }
   else
   {
diff --git a/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.h b/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.h
index c122717..3699a6c 100644
--- a/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.h
+++ b/xbmc/cores/dvdplayer/DVDCodecs/Video/VAAPI.h
@@ -457,7 +457,7 @@ protected:
   CVideoSurfaces m_videoSurfaces;
   vaapi_context m_hwContext;
   AVCodecContext* m_avctx;
-  bool m_getBufferError;
+  int m_getBufferError;
 
   COutput m_vaapiOutput;
   CVaapiBufferStats m_bufferStats;
-- 
2.5.0

